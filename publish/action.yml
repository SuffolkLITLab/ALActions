name: 'ALActions: Publish and Announce'
description: 'Builds your package, publishes it to PyPI, and (optionally) announces it to Teams'
author: 'Bryce Willey'

inputs:
  PYPI_API_TOKEN:
    description: 'The API token to push packages to PyPI'
    required: true
  VERSION_TO_PUBLISH:
    description: 'The version tag to publish (e.g. v1.2.3)'
    required: true
  TEAMS_BUMP_WEBHOOK:
    description: 'Optional Teams incomingâ€‘webhook URL for release announcements'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set environment variables
      shell: bash
      run: |
        echo "VERSION_TO_PUBLISH=${{ inputs.VERSION_TO_PUBLISH }}" >> $GITHUB_ENV
        echo "TEAMS_BUMP_WEBHOOK=${{ inputs.TEAMS_BUMP_WEBHOOK }}" >> $GITHUB_ENV

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install build & twine
      shell: bash
      run: |
        python -m pip install --upgrade build twine

    - name: Check syntax
      shell: bash
      run: |
        python -m compileall . -q

    - name: Build distributions
      shell: bash
      run: |
        python -m build --sdist --wheel --outdir dist/

    - name: Ensure Git tag matches package version
      if: ${{ startsWith(github.ref, 'refs/tags') }}
      shell: bash
      run: |
        pkg_ver=$(grep version= setup.py | cut -d"'" -f2)
        if [ "v$pkg_ver" != "${VERSION_TO_PUBLISH}" ]; then
          echo "::error::Git tag (${VERSION_TO_PUBLISH}) does not match setup.py version (v$pkg_ver)"
          exit 1
        fi

    - name: Publish to PyPI
      if: ${{ success() && startsWith(github.ref, 'refs/tags') }}
      shell: bash
      run: |
        python -m twine upload \
          --non-interactive \
          --repository-url https://upload.pypi.org/legacy/ \
          --username __token__ \
          --password "${{ inputs.PYPI_API_TOKEN }}" \
          dist/*

    - name: Announce to Teams
      if: ${{ success() && startsWith(github.ref, 'refs/tags') && inputs.TEAMS_BUMP_WEBHOOK != '' }}
      shell: bash
      run: |
        project_name=$(basename "$GITHUB_REPOSITORY" | cut -d'-' -f2)
        new_version=$(grep version= setup.py | cut -d"'" -f2)
        link_version="${VERSION_TO_PUBLISH}"
        tag_url="https://github.com/${GITHUB_REPOSITORY}/releases/tag/${link_version}"

        cat <<EOF > teams_msg_to_send.json
{
  "@type": "MessageCard",
  "@context": "https://schema.org/extensions",
  "summary": "${project_name} Version released",
  "themeColor": "0078D7",
  "title": "${project_name} Version ${new_version} released",
  "sections": [{
    "activityTitle": "Version ${new_version}",
    "activityImage": "https://avatars.githubusercontent.com/u/33028765?s=200",
    "facts": [
      { "name": "Repository:", "value": "${GITHUB_REPOSITORY}" },
      { "name": "Tag",        "value": "v${new_version}" }
    ],
    "text": ""
  }],
  "potentialAction": [
    {
      "@type": "OpenUri",
      "name": "See Changelog",
      "targets": [{
        "os": "default",
        "uri": "https://github.com/${GITHUB_REPOSITORY}/releases/tag/${link_version}"
      }]
    },
    {
      "@type": "OpenUri",
      "name": "View in GitHub",
      "targets": [{
        "os": "default",
        "uri": "${tag_url}"
      }]
    }
  ]
}
EOF

        curl -H "Content-Type: application/json" \
             -d "@teams_msg_to_send.json" \
             "${{ inputs.TEAMS_BUMP_WEBHOOK }}"
