name: Check if interviews are installed correctly on a server
description: |
    On Docassemble, the /list endpoint shows if all interviews are installed correctly.
    This action visits the /list endpoint automatically and finds which interviews have errors.
inputs:
  SERVER_URL:
    description: "The url of the docassemble server that you want to check (with or without trailing slash)"
    required: true
  SENDGRID_API_KEY:
    description: "The API Key of a sendgrid account; used to send email notifications when things fail"
    required: false
  MAILGUN_API_KEY:
    description: "The API Key of a mailgun account; used to send email notifications when things fail"
    required: false
  MAILGUN_DOMAIN:
    description: "The Domain that you are sending from mailgun"
    required: false
  ERROR_EMAILS:
    description: "A comma separated list of emails that should be notified when / if this task fails"
    required: false
  ERROR_EMAIL_FROM:
    description: "The email address the error should be sent from. Helps with making sure messages are delivered"
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    - run: pip install bs4 requests sendgrid
      shell: bash
    - run: |
        echo "SERVER_URL=${{inputs.SERVER_URL}}" >> $GITHUB_ENV
      shell: bash
    - id: check_server
      run: |
        # Beautiful soup to find failing interview links
        import bs4
        import requests
        import os
        with requests.get(f"{os.environ['SERVER_URL']}/list") as conn:
            if conn.ok:
                soup = bs4.BeautifulSoup(conn.text, "html.parser")
            else:
                print(f"Hall monitor couldn't connect to {os.environ['SERVER_URL']}: {conn.status_code}")
                exit(1)
        links = soup.find_all("a")
        failed_links = [link for link in links if "dainterviewhaserror" in (link.get("class") or [])]
        if failed_links:
            updated_links = [f"{os.environ['SERVER_URL']}/{fl.attrs['href']}" for fl in failed_links ]
            err_str = f"Hall Monitor found these links that aren't installed correctly: {', '.join(updated_links)}"
            env_file = os.getenv('GITHUB_ENV')
            with open(env_file, "a") as myfile:
                myfile.write(f'ERRORED_INTERVIEWS={err_str}')
            exit(1)
        else:
            print(f"Hall Monitor: all good, no failed links found!")
      shell: python
    - if: ${{ failure() }}
      run: |
        from sendgrid import SendGridAPIClient
        from sendgrid.helpers.mail import Mail
        import os
        import requests

        if not os.getenv("ERROR_EMAILS"):
            print("No error emails passed in! Not going to notify them of this failure")
            exit(0)

        send_from = os.getenv("ERROR_EMAIL_FROM", "no-reply@suffolklitlab.org")
        send_to = [to_send.strip() for to_send in os.environ["ERROR_EMAILS"].split(",")]
        subject = "${{ github.job }} job of ${{ github.repository }} has ${{ steps.check_server.outcome }}"

        content = f"""
        <p>Hey there! Your Hall Monitor Action has a status of ${{ steps.check_server.outcome }}.</p>
        <p>You should check all of the interviews at this URL: <a href="{os.environ['SERVER_URL']}/list">{os.environ['SERVER_URL']}/list</a></p>
        <p>{os.getenv('ERRORED_INTERVIEWS', '') }</p>
        <p>More info:
        <ul>
          <li> Github Repository: ${{ github.repository }} </li>
          <li> Github workflow: ${{ github.workflow }} </li>
          <li> Github job: ${{ github.job }} </li>
          <li> Job status: ${{ steps.check_server.outcome }} </li>
        </ul></p>
        """

        if os.getenv("SENDGRID_API_KEY"):
          message = Mail(from_email=send_from, to_emails=send_to, subject=subject, html_content=content)
          sg = SendGridAPIClient(api_key=os.environ["SENDGRID_API_KEY"])
          try:
            resp = sg.send(message)
          except Exception as e:
            print(f"Error sending email: {e}")
            exit(2)
        elif os.getenv("MAILGUN_API_KEY") and os.getenv("MAILGUN_DOMAIN"):
          url = f"https://api.mailgun.net/v3/{os.environ['MAILGUN_DOMAIN']}/messages"
          resp = requests.post(url, auth=("api", os.environ["MAILGUN_API_KEY"]), data={
            "from": send_from,
            "to": send_to,
            "subject": subject,
            "text": "Your hall monitor action has failed",
            "html": content
          })
        else:
          print("Not sending emails, neither sendgrid or mailgun is setup!")
          exit(2)

        print(f"{resp.status_code}, {resp.body} {resp.headers}")
      shell: python
      env:
        ERROR_EMAIL_FROM: ${{ inputs.ERROR_EMAIL_FROM }}
        ERROR_EMAILS: ${{ inputs.ERROR_EMAILS }}
        SENDGRID_API_KEY: ${{ inputs.SENDGRID_API_KEY }}
        MAILGUN_API_KEY: ${{ inputs.MAILGUN_API_KEY }}
        MAILGUN_DOMAIN: ${{ inputs.MAILGUN_DOMAIN }}
